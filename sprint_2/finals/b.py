"""
https://contest.yandex.ru/contest/22781/run-report/104746359/

-- ПРИНЦИП РАБОТЫ --
Программа работает в соответствии с описанием, которое приведено в самой задаче.
Считывается строка ввода, разбивается по пробелу и обрабатывается каждый элемент списка.
Если символ является оператором (-, +, * или /), программа извлекает два аргумента из стека,
применяет к ним оператор (в порядке добавления их в стек), а затем возвращает результат обратно в стек.
Если символ является операндом, он помещается в стек. После обработки всех символов программа выводит
верхнее значение стека, которое является результатом выражения.

Реализацию стека взял из одной из задач контекста, удалив все лишнее оттуда.

-- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
Довольно сложно понять, что еще написать, чего нет в принципе работы выше. Структура данных стек взята из другой задачи
и ее код является максимально кратким и очевидным. Сама программа тоже довольна очевидна: проверка,
что мы встретили (оператор или операнд), если первое, то достаем два аргумента из стека и применяем оператор, результат
кладем на вершину стека, если операнд, то просто кладем на вершину стека.

-- ВРЕМЕННАЯ СЛОЖНОСТЬ --
Сложность составляет O(n), где n - размер входного списка операторов и операндов. Сложность операций стека составляет O(1),
так как при их выполнении элемент добавляется/удаляется в список и поле size увеличивается/уменьшается.
Если мы встречаем оператор, то два элемента извлекается из стека за O(1) + O(1) = O(1) и к ним применяется эта операция за O(1).
Если встречаем операнд, то добавляем его в стек за O(1).

-- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
Пространственная сложность составляет O(n), где n - размер входного списка операндов,
так как каждый операнд добавляется в стек.
"""


class Stack:
    def __init__(self):
        self._data = []
        self._size = 0

    def push(self, value):
        self._data.append(value)
        self._size += 1

    def pop(self):
        if self._size > 0:
            result = self._data[-1]
            del self._data[-1]
            self._size -= 1

            return result
        else:
            print('error')


stack = Stack()
for symbol in input().split():
    if symbol in '-+*/':
        arg1 = stack.pop()
        arg2 = stack.pop()

        match symbol:
            case '+':
                stack.push(arg1 + arg2)
            case '-':
                stack.push(arg2 - arg1)
            case '*':
                stack.push(arg1 * arg2)
            case '/':
                stack.push(arg2 // arg1)
    else:
        stack.push(int(symbol))

print(stack.pop())
